
//立即调用函数
!function(golable) {
	//基类
	function DetectorBase(configs) {
		//禁止直接调用，必须使用new，函数返回this
		if(!this instanceof DetectorBase) {
			throw new Error('Do not invoke without new.');
		}
		this.configs = configs;
		this.analyze();
	}
	
	//基类的抽象方法
	DetectorBase.prototype.detect = function() {
		throw new Error('Not implemented');
	};
	//基类的具体函数
	DetectorBase.prototype.analyze = function() {
		console.log('analyzing...');
		this.data = '###data###';
	};
	
	//子类
	function LinkDetector(links) {
		if(!this instanceof LinkDetector) {
			throw new Error('Do not invoke without new.');
		}
		//调用基类的构造器
		DetectorBase.apply(this, arguments);
		this.links = links;
	}
	
	function ContainerDetector(containers) {
		if(!this instanceof ContainerDetector) {
			throw new Error('Do not invoke without new.');
		}
		DetectorBase.apply(this, arguments);
		this.containers = containers;
	}
	
	//先继承
	inherit(LinkDetector, DetectorBase);
	inherit(ContainerDetector, DetectorBase);
	
	
	
	//再去扩展
	LinkDetector.prototype.detect = function() {
		console.log('Loading data: ' + this.data);//基类的属性
		console.log('Link detection started');
		console.log('Scaning links: ' + this.links);//子类的属性
		console.log('Scaning cofigs: ' + this.configs);//基类的属性
	};
	ContainerDetector.prototype.detect = function() {
		console.log('Loading data: ' + this.data);
		console.log('Container detection started');
		console.log('Scaning containers: ' + this.containers);
		console.log('Scaning cofigs: ' + this.configs);
	}
	
	//不希望被改写
	Object.freeze(DetectorBase);
	Object.freeze(DetectorBase.prototype);
	Object.freeze(LinkDetector);
	Object.freeze(LinkDetector.prototype);
	Object.freeze(ContainerDetector);
	Object.freeze(ContainerDetector.prototype);
	
	//将类暴露到外面
	Object.defineProperties(golable, {
		'LinkDetector': {value: LinkDetector},
		'ContainerDetector': {value: ContainerDetector},
		'DetectorBase': {value: DetectorBase}
	});
	
	function inherit(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constuctor = subClass;
	}
	
}(this);

var cd = new ContainerDetector('#abc#def#ghi');
var ld = new LinkDetector('http://www.taoba.com');

cd.detect();
ld.detect();