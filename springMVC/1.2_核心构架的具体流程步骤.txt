核心架构的具体流程步骤如下：
1、用户发送请求――>DispatcherServlet，前端控制器收到请求后自己不进行处理，
   而是委托给其他的解析器进行处理，作为统一访问点，进行全局的流程控制.

2、DispatcherServlet――>HandlerMapping， HandlerMapping 将会把请求映射为HandlerExecutionChain 对象
  （包含一个Handler 处理器(页面控制器)对象、多个HandlerInterceptor 拦截器）对象，策略模式，很容易添加新的映射策略.

3、DispatcherServlet――>HandlerAdapter，HandlerAdapter 将会把处理器包装为适配器，从而支持多种类型的处理器，
   即适配器设计模式的应用，从而很容易支持很多类型的处理器.
   注解默认DefaultAnnotationHandlerMapping，已经被RequestMappingHandlerMapping代替

4、HandlerAdapter――>处理器功能处理方法的调用，HandlerAdapter 将会根据适配的结果调用真正的处理器的功能处理方法，
   完成功能处理;并返回一个ModelAndView 对象(包含模型数据、逻辑视图名).
   handler中方法的返回类型可以是ModelAndView,Model,ModelMap,Map,View,String,Void,都会返回一个ModelAndView
   注解默认AnnotationMethodHandlerAdapter，已经被RequestMappingHandlerAdapter代替

5、ModelAndView ――> ViewResolver,如果ModelAndView中的view是View实例,那么直接获取.
   如果view是逻辑视图名(String),那么就要通过ViewResolver 将把逻辑视图名解析为具体的View,策略模式，很容易更换其他视图技

6、View――>渲染,View会根据传进来的Model(Map<String,?>)模型数据进行渲染,很容易支持其他视图技术.

7、返回控制权给DispatcherServlet，由DispatcherServlet返回响应给用户，到此一个流程结束。


此处我们只是讲了核心流程，没有考虑拦截器、本地解析、文件上传解析等，