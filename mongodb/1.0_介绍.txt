特点:
	a.面向集合的存储：适合存储对象及JSON形式的数据。
	b.动态查询：mongo支持丰富的查询表达方式，查询指令使用JSON形式的标记，可轻易查询文档中的内嵌的对象及数组。
	c.完整的索引支持: 包括文档内嵌对象及数组。mongo的查询优化器会分析查询表达式，并生成一个高效的查询计划。
	d.查询监视：mongo包含一个监视工具用于分析数据库操作性能。
	e.复制及自动故障转移：mongo数据库支持服务器之间的数据复制，支持主-从模式及服务器之间的相互复制。复制的主要目的是提供冗余及自动故障转移。
	f.高效的传统存储方式：支持二进制数据及大型对象（如照片或图片）。
	g.自动分片以支持云级别的伸缩性：自动分片功能支持水平的数据库集群，可动态添加额外的机器。

适用场景：
	a.网站数据：mongo非常适合实时的插入，更新与查询，并具备网站实时数据存储所需的复制及高度伸缩性。  b.缓存：由于性能很高，mongo也适合作为信息基础设施的缓存层。在系统重启之后，由mongo搭建的持久化缓存可以避免下层的数据源过载。
	c.大尺寸,低价值的数据：使用传统的关系数据库存储一些数据时可能会比较贵，在此之前，很多程序员往往会选择传统的文件进行存储。
	d.高伸缩性的场景：mongo非常适合由数十或者数百台服务器组成的数据库。
	e.用于对象及JSON数据的存储：mongo的BSON数据格式非常适合文档格式化的存储及查询。

 不适合的场景：
	a.高度事物性的系统：例如银行或会计系统。传统的关系型数据库目前还是更适用于需要大量原子性复杂事务的应用程序。
	b.传统的商业智能应用：针对特定问题的BI数据库会对产生高度优化的查询方式。对于此类应用，数据仓库可能是更合适的选择。
	c.需要SQL的问题。
	
http://www.runoob.com/mongodb/mongodb-tutorial.html