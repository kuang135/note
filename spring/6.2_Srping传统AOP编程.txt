Spring的AOP编程
	1.切入点,通过配置完成
	2.通知,通过代码完成

通知的5种类型
	1. org.springframework.aop.MethodBeforeAdvice,前置通知
	2. org.springframework.aop.AfterReturningAdvice,后置通知
	3. org.aopalliance.intercept.MethodInterceptor,环绕通知
	4. org.springframework.aop.ThrowsAdvice,异常抛出通知
	5. org.springframework.aop.IntroductionInterceptor,引介通知,在目标类中添加一些新的方法和属性

传统AOP的切入点语法,使用正则表达式,基本不用,使用AspectJ切入点语法

步骤:
    1.导入jar包
	com.springsource.org.aopalliance-1.0.0.jar AOP联盟定义接口规范
	spring-aop-3.2.0.RELEASE.jar Spring对AOP扩展支持 
	com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar 第三方AspectJ 包
	spring-aspects-3.2.0.RELEASE.jar Spring 对AspectJ 扩展支持 

    2.编写Advice
	public class TimeAdvice implements MethodInterceptor{
	    @Override
	    public Object invoke(MethodInvocation invocation) throws Throwable {
		long begin=System.currentTimeMillis();
		Object result=invocation.proceed();
		long end=System.currentTimeMillis();
		System.out.print(invocation.getMethod().getName()+"的执行时间是:"+(end-begin)+"毫秒.");
		return result;
	    }
	}

    3.配置<aop:config>,参考xsd-config.html引入xsd
	<!-- 配置Advice通知 -->
	<bean id="timeAdvice" class="cn.itcast.advice.TimeAdvice" />
	<!-- AOP相关配置  -->
	<aop:config proxy-target-class="true">
		<!-- 配置切入点 -->
		<aop:pointcut expression="bean(*Dao)" id="myPointcut"/>
		<!-- advisor配置传统Spring AOP的切面 （只能有一个切入点和一个通知） -->
		<aop:advisor advice-ref="timeAdvice" pointcut-ref="myPointcut"/>
	</aop:config>