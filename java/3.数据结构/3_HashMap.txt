HashMap：动态扩容的数组和链表的结合，hash码相同的数据放在同一个散列桶中
	key的hash码越不一致，就越趋向于数组
	key的hash码越一致，就越趋向于链表

key的hash码和遍历：
	Set<User> keySet = map.keySet();利于数组，key的hash码越不一致，遍历越快
	Set<Entry<User, String>> entrySet = map.entrySet();利于链表，key的hash码越一致，遍历越快

内部维护：
	初始容量
		static final int DEFAULT_INITIAL_CAPACITY = 1 << 4;
	最大容量
		static final int MAXIMUM_CAPACITY = 1 << 30;
	默认加载因子
		static final float DEFAULT_LOAD_FACTOR = 0.75f;
	加载因子，通过构造设定
		final float loadFactor;
	阀值 = 容量 * 加载因子，map的size大于这个值的时候，就会扩容为原来容量的2倍
		int threshold;
	map中元素的个数，并不是容量，容量是table.length
		transient int size;
	散列桶数组
		transient Entry<K,V>[] table = (Entry<K,V>[]) EMPTY_TABLE;
		
重要内部类：
	Entry<K,V> -- 散列桶
	KeySet -- 键的集合
	Values -- 值的集合
		
equals和hashCode：
	map在操作put的时候，是通过key元素的hashCode和equals方法来判断该key是否已经存在
	
LinkedHashMap:
	继承自HashMap
	LinkedHashMap$Entry维护了Entry<K,V> before, after;这个before和after可以指向其他散列桶中的数据

		