Mybatis可以通过配置,以动态代理的方式生成DAO接口的实现,这个DAO接口称为映射器(Mapper).

映射器是创建绑定映射语句的接口,其实例可以从 SqlSession 中获得,最佳范围是方法范围。
也就是说,它们应该在使用它们的方法中被请求,然后就抛弃掉。

原理：MapperProxy<T> implements InvocationHandler -- T为接口(比如UserMapper)
      sqlSession.getMapper() == Proxy.newProxyInstance()
		sqlSession.getMapper()会去调MapperProxyFactory.newInstance(SqlSession)
		里面会去调Proxy.newProxyInstance(类加载器, 接口, MapperProxy<T>)，产生T的实现类
      sqlSession.selectList(?,?) == MapperProxy.invoke()
		MapperProxy.invoke()会去调MapperMethod的execute()，
		里面会去调SqlSession的selectList(?,?)

xml方式:
	1.定义映射接口
		public interface UserMapper {
		    public User selectUser(int id);
		}
	2.配置UserMapper.xml
		<mapper namespace="cn.itcast.mapper.UserMapper" > <!-- namespace是接口名的全路径 -->
			<select id="selectUser" parameterType="int" resultType="cn.itcast.domain.User"> <!-- id是接口中定义的方法名 -->
				SELECT * FROM user WHERE id = #{userId}
			</select>
		</mapper>
	3.mybatis-config.xml中引入mapper.xml
		<mappers>
			<mapper resource="UserMapper.xml" />
		</mappers>
	4.代码中通过映射操作数据库
		UserMapper userMapper = sqlSession.getMapper(UserMapper.class);
		User user = userMapper.selectUser(1);

注解方式:
	1.定义映射接口,使用注解
		public interface UserMapper {
		    @Select("SELECT * FROM user WHERE id = #{userId}")
		    public User selectUser(int id);
		}
	2.在mybatis-config.xml中配置mappers标签
		<mappers>
			<package name="cn.itcast.mapper"/> <!-- UserMapper所在的包 -->
		</mappers>
	3.代码中通过映射操作数据库
		UserMapper userMapper = sqlSession.getMapper(UserMapper.class);
		User user = userMapper.selectUser(1);

注意: 使用映射(Mapper)时必须具备以几个条件
	1.Mapper的namespace必须和mapper接口的全路径一致。
	2.Mapper接口的方法名必须和sql定义的id一致。
	3.Mapper接口中方法的输入参数类型必须和sql定义的parameterType一致。
	4.Mapper接口中方法的输出参数类型必须和sql定义的resultType一致