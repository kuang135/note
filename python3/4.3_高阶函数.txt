1.把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式。


2.map()
	map(func, *iterables) --> map object
	map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回
		def f(x):
			return x * x
		r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])
		list(r) #[1, 4, 9, 16, 25, 36, 49, 64, 81]

		
3.reduce()
	reduce(function, sequence[, initial]) -> value
	from functools import reduce
	def fn(x, y):
		return x * 10 + y
	reduce(fn, [1, 3, 5, 7, 9]) #13579

	
4.lambda 函数简化 map,reduce
	from functools import reduce
	def char2num(s):
		return {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}[s]
	def str2int(s):
		return reduce(lambda x, y: x * 10 + y, map(char2num, s))
		
5.filter()
	filter(function or None, iterable) --> filter object，返回一个Iterator
	filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素
	def is_odd(n):
		return n % 2 == 1
	list(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15])) # [1, 5, 9, 15]
	
6.sorted()
	sorted(iterable, key=None, reverse=False) --> new sorted list
	sorted([36, 5, -12, 9, -21], key=abs)	#[5, 9, -12, -21, 36]
	