为了既能检查参数，又可以用类似属性这样简单的方式来访问类的变量
Python内置的@property装饰器就是负责把一个方法变成属性调用的：

	class Student(object):

		@property
		def score(self):
			return self._score

		@score.setter
		def score(self, value):
			if not isinstance(value, int):
				raise ValueError('score must be an integer!')
			if value < 0 or value > 100:
				raise ValueError('score must between 0 ~ 100!')
			self._score = value
			
	>>> s = Student()
	>>> s.score = 60 # OK，实际转化为s.set_score(60)
	>>> s.score # OK，实际转化为s.get_score()
	60
	>>> s.score = 9999
	Traceback (most recent call last):
	  ...
	ValueError: score must between 0 ~ 100!